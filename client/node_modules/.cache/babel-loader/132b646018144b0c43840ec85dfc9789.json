{"ast":null,"code":"var _jsxFileName = \"/Users/helen-tran/Documents/Concordia-Bootcamp/Workshops/project-GROUP-e-commerce/client/src/components/ShopDataContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ShopDataContext = /*#__PURE__*/createContext(); // the reducer\n\nconst reducer = (cartItems, action) => {\n  // make a copy of the existing cart array to modify\n  let newCartItemsArr = [...cartItems]; // if an item is being passed through into reducer, check if the item to be added or removed already exists in the cart array, and if so, find its index\n\n  const indexOfItem = action.item ? cartItems.findIndex(cartItem => cartItem._id === action.item._id) : null;\n\n  switch (action.type) {\n    // try to add one stock of an item to the cart\n    case \"add-item-to-cart\":\n      if (indexOfItem === -1 || indexOfItem === undefined) {\n        // if item is not already in the cart, add it in, with a quantity of 1\n        newCartItemsArr.push({ ...action.item,\n          quantity: 1\n        });\n      } else {\n        // if it IS already in the cart,check if user is trying to buy more than exist\n        if (newCartItemsArr[indexOfItem].quantity >= newCartItemsArr[indexOfItem].numInStock) {\n          // if trying to buy more than exist, show an alert\n          alert(`Another item ${action.item._id} cannot be added to cart, as you are trying to purchase more than existing stock.`);\n        } else {\n          // if not, increase its quantity by 1\n          newCartItemsArr[indexOfItem].quantity = newCartItemsArr[indexOfItem].quantity + 1;\n        }\n      } // return the modified cart array\n\n\n      return newCartItemsArr;\n    // try to remove one stock of an item from the cart\n\n    case \"remove-item-from-cart\":\n      if (indexOfItem === -1) {\n        // if item is not already in the cart, you can't remove it, so throw an error\n        throw new Error(`Item ${action.item._id} is not in the cart, so it can't be removed.`);\n      } else {\n        // if it IS already in the cart, check if quantity is above 1\n        if (newCartItemsArr[indexOfItem].quantity > 1) {\n          // if so, decrease quantity by one\n          newCartItemsArr[indexOfItem].quantity--;\n        } else {\n          // otherwise, delete the item from cartItems\n          newCartItemsArr = newCartItemsArr.filter(cartItem => cartItem._id !== action.item._id);\n        }\n      } // return the modified cart array\n\n\n      return newCartItemsArr;\n    // try to remove all stock of an item from the cart\n\n    case \"remove-all-of-one-item-from-cart\":\n      if (indexOfItem === -1) {\n        // if item is not already in the cart, you can't remove it, so throw an error\n        throw new Error(`Item ${action.item._id} is not in the cart, so it can't be removed.`);\n      } else {\n        // if it IS already in the cart, delete the item from cartItems\n        newCartItemsArr = newCartItemsArr.filter(cartItem => cartItem._id !== action.item._id);\n      } // return the modified cart array\n\n\n      return newCartItemsArr;\n    // remove all items from the cart\n\n    case \"clear-cart\":\n      // return an empty array to clear the cart\n      return [];\n\n    default:\n      // if action type is unrecognized, display error\n      throw new Error(\"Unrecognized action\");\n  }\n}; // context provider\n\n\nexport const ShopDataProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  // the cart items (kept in state) and dispatch\n  const [cartItems, dispatch] = useReducer(reducer, []); // calculate total number of cart items, tallying up the quantities of each item in cart, or 0 if there are none\n\n  const getNumItemsInCart = cartItems => {\n    return cartItems.length > 0 ? cartItems.map(item => item.quantity).reduce((acc, curr) => acc + curr, 0) : 0;\n  }; // calculate total cost of all the cart items\n\n\n  const getTotalCostOfCart = cartItems => {\n    return Math.round(cartItems.map(item => Number(item.price.split(\"$\")[1].replace(/,/gi, '')) * item.quantity).reduce((acc, curr) => acc + curr, 0) * 100) / 100;\n  }; // create special cart object containing only the information needed to send to server, for the PUT request to /items/buy\n\n\n  const makeCartObjForServer = cartItems => {\n    return cartItems.map(item => {\n      return {\n        itemId: item._id,\n        quantity: item.quantity\n      };\n    });\n  }; // purchase items in the cart (send properly-formatted PUT request to items/buy)\n\n\n  const handlePurchase = () => {\n    // create special cart object containing only the information needed to send to server\n    const cartForServer = makeCartObjForServer(cartItems);\n    fetch(`/items/buy`, {\n      method: \"PUT\",\n      body: JSON.stringify({\n        _id: uuidv4(),\n        cart: cartForServer\n      }),\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(json => {\n      const {\n        status,\n        message,\n        data\n      } = json; // check that the request got successfully through to server\n\n      if (status === 202) {\n        // if so, clear the cart\n        dispatch({\n          type: \"clear-cart\"\n        }); // Display confirmation message that the items were purchased.\n\n        alert(`Successfully purchased items. Your order ID is ${data._id}`);\n      } else {\n        // if it didn't go through, show an error.\n        throw new Error({\n          status,\n          message,\n          data\n        });\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(ShopDataContext.Provider, {\n    value: {\n      cartItems,\n      dispatch,\n      getNumItemsInCart,\n      getTotalCostOfCart,\n      makeCartObjForServer,\n      handlePurchase\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ShopDataProvider, \"vzDDbTMozZ01H3hrLFY2356WTnA=\");\n\n_c = ShopDataProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShopDataProvider\");","map":{"version":3,"sources":["/Users/helen-tran/Documents/Concordia-Bootcamp/Workshops/project-GROUP-e-commerce/client/src/components/ShopDataContext.js"],"names":["React","createContext","useReducer","v4","uuidv4","ShopDataContext","reducer","cartItems","action","newCartItemsArr","indexOfItem","item","findIndex","cartItem","_id","type","undefined","push","quantity","numInStock","alert","Error","filter","ShopDataProvider","children","dispatch","getNumItemsInCart","length","map","reduce","acc","curr","getTotalCostOfCart","Math","round","Number","price","split","replace","makeCartObjForServer","itemId","handlePurchase","cartForServer","fetch","method","body","JSON","stringify","cart","headers","Accept","then","res","json","status","message","data"],"mappings":"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","sourcesContent":["import React, { createContext, useReducer } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport const ShopDataContext = createContext();\r\n\r\n// the reducer\r\nconst reducer = (cartItems, action) => {\r\n  // make a copy of the existing cart array to modify\r\n  let newCartItemsArr = [...cartItems];\r\n  // if an item is being passed through into reducer, check if the item to be added or removed already exists in the cart array, and if so, find its index\r\n  const indexOfItem = action.item\r\n    ? cartItems.findIndex((cartItem) => cartItem._id === action.item._id)\r\n    : null;\r\n\r\n  switch (action.type) {\r\n    // try to add one stock of an item to the cart\r\n    case \"add-item-to-cart\":\r\n      if (indexOfItem === -1 || indexOfItem === undefined) {\r\n        // if item is not already in the cart, add it in, with a quantity of 1\r\n        newCartItemsArr.push({ ...action.item, quantity: 1 });\r\n      } else {\r\n        // if it IS already in the cart,check if user is trying to buy more than exist\r\n        if (\r\n          newCartItemsArr[indexOfItem].quantity >=\r\n          newCartItemsArr[indexOfItem].numInStock\r\n        ) {\r\n          // if trying to buy more than exist, show an alert\r\n          alert(\r\n            `Another item ${action.item._id} cannot be added to cart, as you are trying to purchase more than existing stock.`\r\n          );\r\n        } else {\r\n          // if not, increase its quantity by 1\r\n          newCartItemsArr[indexOfItem].quantity =\r\n            newCartItemsArr[indexOfItem].quantity + 1;\r\n        }\r\n      }\r\n      // return the modified cart array\r\n      return newCartItemsArr;\r\n\r\n    // try to remove one stock of an item from the cart\r\n    case \"remove-item-from-cart\":\r\n\r\n      if (indexOfItem === -1) {\r\n        // if item is not already in the cart, you can't remove it, so throw an error\r\n        throw new Error(\r\n          `Item ${action.item._id} is not in the cart, so it can't be removed.`\r\n        );\r\n      } else {\r\n        // if it IS already in the cart, check if quantity is above 1\r\n        if (newCartItemsArr[indexOfItem].quantity > 1) {\r\n          // if so, decrease quantity by one\r\n          newCartItemsArr[indexOfItem].quantity--;\r\n        } else {\r\n          // otherwise, delete the item from cartItems\r\n          newCartItemsArr = newCartItemsArr.filter(\r\n            (cartItem) => cartItem._id !== action.item._id\r\n          );\r\n        }\r\n      }\r\n      // return the modified cart array\r\n      return newCartItemsArr;\r\n\r\n    // try to remove all stock of an item from the cart\r\n    case \"remove-all-of-one-item-from-cart\":\r\n      if (indexOfItem === -1) {\r\n        // if item is not already in the cart, you can't remove it, so throw an error\r\n        throw new Error(\r\n          `Item ${action.item._id} is not in the cart, so it can't be removed.`\r\n        );\r\n      } else {\r\n        // if it IS already in the cart, delete the item from cartItems\r\n        newCartItemsArr = newCartItemsArr.filter(\r\n          (cartItem) => cartItem._id !== action.item._id\r\n        );\r\n      }\r\n      // return the modified cart array\r\n      return newCartItemsArr;\r\n\r\n    // remove all items from the cart\r\n    case \"clear-cart\":\r\n      // return an empty array to clear the cart\r\n      return [];\r\n    default:\r\n      // if action type is unrecognized, display error\r\n      throw new Error(\"Unrecognized action\");\r\n  }\r\n};\r\n\r\n// context provider\r\nexport const ShopDataProvider = ({ children }) => {\r\n  // the cart items (kept in state) and dispatch\r\n  const [cartItems, dispatch] = useReducer(reducer, []);\r\n\r\n  // calculate total number of cart items, tallying up the quantities of each item in cart, or 0 if there are none\r\n  const getNumItemsInCart = (cartItems) => {\r\n    return cartItems.length > 0\r\n      ? cartItems\r\n          .map((item) => item.quantity)\r\n          .reduce((acc, curr) => acc + curr, 0)\r\n      : 0;\r\n  };\r\n\r\n  // calculate total cost of all the cart items\r\n  const getTotalCostOfCart = (cartItems) => {\r\n    return (\r\n      Math.round(\r\n        cartItems\r\n          .map((item) => Number((item.price.split(\"$\")[1]).replace(/,/gi, '')) * item.quantity)\r\n          .reduce((acc, curr) => acc + curr, 0) * 100\r\n      ) / 100\r\n    );\r\n  };\r\n\r\n  // create special cart object containing only the information needed to send to server, for the PUT request to /items/buy\r\n  const makeCartObjForServer = (cartItems) => {\r\n    return cartItems.map((item) => {\r\n      return { itemId: item._id, quantity: item.quantity };\r\n    });\r\n  };\r\n\r\n  // purchase items in the cart (send properly-formatted PUT request to items/buy)\r\n  const handlePurchase = () => {\r\n    // create special cart object containing only the information needed to send to server\r\n    const cartForServer = makeCartObjForServer(cartItems);\r\n\r\n    fetch(`/items/buy`, {\r\n      method: \"PUT\",\r\n      body: JSON.stringify({\r\n        _id: uuidv4(),\r\n        cart: cartForServer,\r\n      }),\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n\r\n        const { status, message, data } = json;\r\n\r\n        // check that the request got successfully through to server\r\n        if (status === 202) {\r\n          // if so, clear the cart\r\n          dispatch({\r\n            type: \"clear-cart\",\r\n          });\r\n          // Display confirmation message that the items were purchased.\r\n          alert(`Successfully purchased items. Your order ID is ${data._id}`);\r\n        } else {\r\n          // if it didn't go through, show an error.\r\n          throw new Error({ status, message, data });\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <ShopDataContext.Provider\r\n      value={{\r\n        cartItems,\r\n        dispatch,\r\n        getNumItemsInCart,\r\n        getTotalCostOfCart,\r\n        makeCartObjForServer,\r\n        handlePurchase,\r\n      }}\r\n    >\r\n      {children}\r\n    </ShopDataContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}